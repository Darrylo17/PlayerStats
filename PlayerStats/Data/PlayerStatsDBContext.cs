// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using PlayerStats.Models;

namespace PlayerStats.Data;

public partial class PlayerStatsDBContext : DbContext
{
    public PlayerStatsDBContext()
    {
    }

    public PlayerStatsDBContext(DbContextOptions<PlayerStatsDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<PlayerView> PlayerView { get; set; }

    public virtual DbSet<Players> Players { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=playerstatsdb.database.windows.net;Initial Catalog=PlayerStatsDB;Persist Security Info=True;User ID=serveradmin;Password=TENben@3");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<PlayerView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("PlayerView");

            entity.Property(e => e.AttackingPosition).HasColumnName("Attacking_Position");
            entity.Property(e => e.BallControl).HasColumnName("Ball_Control");
            entity.Property(e => e.BirthDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Birth_Date");
            entity.Property(e => e.Club)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClubJoining)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Club_Joining");
            entity.Property(e => e.ClubKit).HasColumnName("Club_Kit");
            entity.Property(e => e.ClubPosition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Club_Position");
            entity.Property(e => e.ContractExpiry)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Contract_Expiry");
            entity.Property(e => e.FreekickAccuracy).HasColumnName("Freekick_Accuracy");
            entity.Property(e => e.GkDiving).HasColumnName("GK_Diving");
            entity.Property(e => e.GkHandling).HasColumnName("GK_Handling");
            entity.Property(e => e.GkKicking).HasColumnName("GK_Kicking");
            entity.Property(e => e.GkPositioning).HasColumnName("GK_Positioning");
            entity.Property(e => e.GkReflexes).HasColumnName("GK_Reflexes");
            entity.Property(e => e.Height)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LongPass).HasColumnName("Long_Pass");
            entity.Property(e => e.LongShots).HasColumnName("Long_Shots");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NationalKit).HasColumnName("National_Kit");
            entity.Property(e => e.NationalPosition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("National_Position");
            entity.Property(e => e.Nationality)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PlayerId).HasColumnName("PlayerID");
            entity.Property(e => e.PrefferedFoot)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Preffered_Foot");
            entity.Property(e => e.PrefferedPosition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Preffered_Position");
            entity.Property(e => e.ShortPass).HasColumnName("Short_Pass");
            entity.Property(e => e.ShotPower).HasColumnName("Shot_Power");
            entity.Property(e => e.SkillMoves).HasColumnName("Skill_Moves");
            entity.Property(e => e.SlidingTackle).HasColumnName("Sliding_Tackle");
            entity.Property(e => e.StandingTackle).HasColumnName("Standing_Tackle");
            entity.Property(e => e.WeakFoot).HasColumnName("Weak_foot");
            entity.Property(e => e.WorkRate)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Work_Rate");
        });

        modelBuilder.Entity<Players>(entity =>
        {
            entity.HasKey(e => e.PlayerId).HasName("PK__players__4A4E74A800B0562C");

            entity.ToTable("players");

            entity.Property(e => e.PlayerId)
                .ValueGeneratedNever()
                .HasColumnName("PlayerID");
            entity.Property(e => e.AttackingPosition).HasColumnName("Attacking_Position");
            entity.Property(e => e.BallControl).HasColumnName("Ball_Control");
            entity.Property(e => e.BirthDate)
                .HasColumnType("date")
                .HasColumnName("Birth_Date");
            entity.Property(e => e.Club)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ClubJoining)
                .HasColumnType("date")
                .HasColumnName("Club_Joining");
            entity.Property(e => e.ClubKit).HasColumnName("Club_Kit");
            entity.Property(e => e.ClubPosition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Club_Position");
            entity.Property(e => e.ContractExpiry)
                .HasColumnType("date")
                .HasColumnName("Contract_Expiry");
            entity.Property(e => e.FreekickAccuracy).HasColumnName("Freekick_Accuracy");
            entity.Property(e => e.GkDiving).HasColumnName("GK_Diving");
            entity.Property(e => e.GkHandling).HasColumnName("GK_Handling");
            entity.Property(e => e.GkKicking).HasColumnName("GK_Kicking");
            entity.Property(e => e.GkPositioning).HasColumnName("GK_Positioning");
            entity.Property(e => e.GkReflexes).HasColumnName("GK_Reflexes");
            entity.Property(e => e.Height)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LongPass).HasColumnName("Long_Pass");
            entity.Property(e => e.LongShots).HasColumnName("Long_Shots");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.NationalKit).HasColumnName("National_Kit");
            entity.Property(e => e.NationalPosition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("National_Position");
            entity.Property(e => e.Nationality)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.PrefferedFoot)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Preffered_Foot");
            entity.Property(e => e.PrefferedPosition)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Preffered_Position");
            entity.Property(e => e.ShortPass).HasColumnName("Short_Pass");
            entity.Property(e => e.ShotPower).HasColumnName("Shot_Power");
            entity.Property(e => e.SkillMoves).HasColumnName("Skill_Moves");
            entity.Property(e => e.SlidingTackle).HasColumnName("Sliding_Tackle");
            entity.Property(e => e.StandingTackle).HasColumnName("Standing_Tackle");
            entity.Property(e => e.WeakFoot).HasColumnName("Weak_foot");
            entity.Property(e => e.WorkRate)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("Work_Rate");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}